# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'sendmail.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import time
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import xlrd
import smtplib
import pandas as pd
import numpy as np

from email.mime.text import MIMEText
from email.header import Header


class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(739, 560)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(10, 100, 311, 181))
        self.textEdit.setObjectName("textEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(300, 480, 191, 31))
        self.label.setObjectName("label")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(10, 30, 311, 41))
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 10, 72, 15))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 80, 72, 15))
        self.label_3.setObjectName("label_3")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(230, 290, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(400, 30, 91, 16))
        self.label_4.setObjectName("label_4")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(602, 20, 121, 28))
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(10, 340, 91, 16))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(10, 370, 72, 15))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(10, 400, 72, 15))
        self.label_7.setObjectName("label_7")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(230, 440, 111, 28))
        self.pushButton_6.setObjectName("pushButton_6")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(390, 340, 81, 16))
        self.label_8.setObjectName("label_8")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(110, 340, 231, 21))
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_2.setGeometry(QtCore.QRect(110, 370, 231, 21))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_3.setGeometry(QtCore.QRect(110, 400, 231, 21))
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.textBrowser_4 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_4.setGeometry(QtCore.QRect(480, 340, 231, 21))
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(450, 390, 261, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(400, 390, 41, 16))
        self.label_9.setObjectName("label_9")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(405, 61, 321, 231))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(620, 440, 93, 28))
        self.pushButton_5.setObjectName("pushButton_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 739, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action = QtWidgets.QAction(MainWindow)
        self.action.setObjectName("action")
        self.actionSMTP = QtWidgets.QAction(MainWindow)
        self.actionSMTP.setObjectName("actionSMTP")
        self.actionPOP3 = QtWidgets.QAction(MainWindow)
        self.actionPOP3.setObjectName("actionPOP3")
        self.action_2 = QtWidgets.QAction(MainWindow)
        self.action_2.setObjectName("action_2")
        self.action_3 = QtWidgets.QAction(MainWindow)
        self.action_3.setObjectName("action_3")
        self.menu.addAction(self.action)
        self.menu_2.addAction(self.actionSMTP)
        self.menu_2.addAction(self.actionPOP3)
        self.menu_3.addAction(self.action_2)
        self.menu_3.addAction(self.action_3)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 导入收件人列表（页面端）
        self.pushButton_4.clicked.connect(self.openfile)
        self.pushButton_4.clicked.connect(self.create_table_show)

        # 导入收件人列表（菜单栏-新建）
        self.action.triggered.connect(self.openfile)
        self.action.triggered.connect(self.create_table_show)

        # SMTP设置
        self.actionSMTP.triggered.connect(self.SMTPSetup)
        self.actionSMTP.triggered.connect(self.SMTPShow)

        # SMTP测试
        self.pushButton_6.clicked.connect(self.SMTP_Test)

        # 发送邮件
        self.pushButton_5.clicked.connect(self.SMTP_Send)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Group Mail"))
        self.label.setText(_translate("MainWindow", "Group Mail Version 1.0"))
        self.label_2.setText(_translate("MainWindow", "邮件主题"))
        self.label_3.setText(_translate("MainWindow", "邮件内容"))
        self.pushButton.setText(_translate("MainWindow", "预览"))
        self.label_4.setText(_translate("MainWindow", "收件人列表"))
        self.pushButton_4.setText(_translate("MainWindow", "导入收件人列表"))
        self.label_5.setText(_translate("MainWindow", "SMTP服务器地址"))
        self.label_6.setText(_translate("MainWindow", "SMTP账号"))
        self.label_7.setText(_translate("MainWindow", "SMTP密码"))
        self.pushButton_6.setText(_translate("MainWindow", "SMTP服务测试"))
        self.label_8.setText(_translate("MainWindow", "发件人邮箱"))
        self.label_9.setText(_translate("MainWindow", "进度"))
        self.pushButton_5.setText(_translate("MainWindow", "一键发送"))
        self.menu.setTitle(_translate("MainWindow", "新建"))
        self.menu_2.setTitle(_translate("MainWindow", "设置"))
        self.menu_3.setTitle(_translate("MainWindow", "关于"))
        self.action.setText(_translate("MainWindow", "导入收件人列表"))
        self.actionSMTP.setText(_translate("MainWindow", "SMTP服务器设置"))
        self.actionPOP3.setText(_translate("MainWindow", "POP3服务器设置"))
        self.action_2.setText(_translate("MainWindow", "更新版本"))
        self.action_3.setText(_translate("MainWindow", "关于我们"))

    def openfile(self):

        ###获取路径===================================================================
        try:
            openfile_name = QFileDialog.getOpenFileName(self, '选择文件', '', 'Excel files(*.xlsx , *.xls)')

            # print(openfile_name)
            global path_openfile_name

            ###获取路径====================================================================

            path_openfile_name = openfile_name[0]
        except Exception as e:
            print('err', e)

    def create_table_show(self):
        ###===========读取表格，转换表格，===========================================
        if len(path_openfile_name) > 0:
            input_table = pd.read_excel(path_openfile_name)
            # print(input_table)
            input_table_rows = input_table.shape[0]
            input_table_colunms = input_table.shape[1]
            # print(input_table_rows)
            # print(input_table_colunms)
            input_table_header = input_table.columns.values.tolist()
            # print(input_table_header)

            ###===========读取表格，转换表格，============================================
            ###======================给tablewidget设置行列表头============================

            self.tableWidget.setColumnCount(input_table_colunms)
            self.tableWidget.setRowCount(input_table_rows)
            self.tableWidget.setHorizontalHeaderLabels(input_table_header)

            ###======================给tablewidget设置行列表头============================

            ###================遍历表格每个元素，同时添加到tablewidget中========================
            for i in range(input_table_rows):
                input_table_rows_values = input_table.iloc[[i]]
                # print(input_table_rows_values)
                input_table_rows_values_array = np.array(input_table_rows_values)
                input_table_rows_values_list = input_table_rows_values_array.tolist()[0]
                # print(input_table_rows_values_list)
                for j in range(input_table_colunms):
                    input_table_items_list = input_table_rows_values_list[j]
                    # print(input_table_items_list)
                    # print(type(input_table_items_list))

                    ###==============将遍历的元素添加到tablewidget中并显示=======================

                    input_table_items = str(input_table_items_list)
                    newItem = QTableWidgetItem(input_table_items)
                    newItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
                    self.tableWidget.setItem(i, j, newItem)

        ###================遍历表格每个元素，同时添加到tablewidget中========================
        else:
            self.centralWidget.show()

    def SMTPSetup(self):
        try:
            global SMTP_Addr, SMTP_Port, SMTP_User, SMTP_Pass
            _SMTP_Addr, ok1 = QInputDialog.getText(self, "SMTP设置", "请输入SMTP服务器地址:", QLineEdit.Normal, "例如：smtp.pku.edu.cn")
            _SMTP_Port, ok2 = QInputDialog.getText(self, "SMTP端口", "请输入SMTP端口:", QLineEdit.Normal, "例如：25")
            _SMTP_User, ok3 = QInputDialog.getText(self, "SMTP用户设置", "请输入SMTP用户名:", QLineEdit.Normal, "例如：xxxxx@pku.edu.cn")
            _SMTP_Pass, ok4 = QInputDialog.getText(self, "SMTP用户密码设置", "请输入SMTP用户密码:", QLineEdit.Normal, "例如：xxxxxx")

            if ok1 and ok2 and ok3 and ok4:
                SMTP_Addr, SMTP_Port, SMTP_User, SMTP_Pass = _SMTP_Addr, _SMTP_Port, _SMTP_User, _SMTP_Pass
        except Exception as e:
            print('err ',e)


    def SMTPShow(self):
        if len(SMTP_Addr) >= 0:
            self.textBrowser.setText(SMTP_Addr)
        if len(SMTP_Port) >= 0:
            pass
        if len(SMTP_User) >= 0:
            self.textBrowser_2.setText(SMTP_User)
            self.textBrowser_4.setText(SMTP_User)
        if len(SMTP_Pass) >= 0:
            self.textBrowser_3.setText("******")

    def SMTP_Test(self):
        print("nice")
        try:
            if len(SMTP_Addr) > 0 and len(SMTP_Port) > 0 and len(SMTP_User) > 0 and len(SMTP_Pass) > 0:

                host = SMTP_Addr  # 设置服务器
                user = SMTP_User  # 用户名
                password = SMTP_Pass  # 口令
                sender = SMTP_User  # 发送方
                receiver = "1162858612@qq.com"

                message = MIMEText('SMTP Test.', 'plain', 'utf-8')
                message['From'] = Header(sender)  # 发送者
                message['To'] = Header(receiver)  # 接受者

                subject = 'SMTP Test'
                message['subject'] = Header(subject, 'utf-8')


                smtpObj = smtplib.SMTP()
                smtpObj.connect(host, SMTP_Port)  # 25 为 SMTP 端口号
                smtpObj.login(user, password)
                smtpObj.sendmail(sender, receiver, message.as_string())
                reply = QMessageBox.warning(self,
                                            "SMTP测试",
                                            "SMTP配置成功！",
                                            QMessageBox.Yes)
            else:
                print("here")
                # 弹窗测试失败
                reply = QMessageBox.warning(self,
                                            "SMTP测试",
                                            "SMTP测试失败！",
                                            QMessageBox.Yes)
        except Exception as e:
            print(e)
            reply = QMessageBox.warning(self,
                                        "SMTP测试",
                                        "SMTP测试失败！",
                                        QMessageBox.Yes)

    def SMTP_Send(self):
        # 读取学生名单
        print("here")
        Subject = self.textEdit_2.toPlainText()
        MailContent = self.textEdit.toPlainText()

        try:
            if len(Subject) > 0 and len(MailContent) > 0 and len(path_openfile_name) > 0 and len(SMTP_Addr) > 0 and len(SMTP_Port) > 0 and len(SMTP_User) > 0 and len(SMTP_Pass) > 0:
                data = xlrd.open_workbook(path_openfile_name)
                table = data.sheet_by_index(0)

                ############################################################################################################
                # 发件人信息设置

                # 第三方SMTP服务，请在此处设置PKU邮箱的账号信息，只需填写user和password信息，user为发件邮箱，password为发件邮箱的登录密码
                host = SMTP_Addr  # 设置服务器
                user = SMTP_User  # 用户名
                password = SMTP_Pass  # 口令
                sender = SMTP_User  # 发送方

                #############################################################################################################

                # 学生姓名列表
                names = table.col_values(table.row_values(0).index("姓名"))[1:]

                # 学生排名信息列表
                orders = [int(i) for i in table.col_values(table.row_values(0).index("排名"))[1:]]

                # 接收方 学生邮箱地址列表
                receivers = table.col_values(table.row_values(0).index("邮箱"))[1:]

                for i in range(len(names)):
                    name = names[i]
                    receiver = receivers[i]
                    order = orders[i]
                    # 三个参数：第一个为文本内容，第二个 plain 设置文本格式，第三个 utf-8 设置编码
                    # 邮件内容请在这里定义，如果要修改总人数，也请在这里修改。注意，这里的总人数只能设置一次，并且是保持不变的，即名单中的学生收到的邮件
                    # 中的总人数均为130，如果人数会变动（比如两个班或者年级），请分别整理出两个班级的信息Excel表格，并修改相应的总人数，分别运行程序
                    message = MIMEText('''{}同学你好,\n祝贺你得奖。你的排名是 {}/130.'''.format(name, order), 'plain', 'utf-8')
                    message['From'] = Header(sender)  # 发送者
                    message['To'] = Header(receiver)  # 接受者

                    subject = Subject
                    message['subject'] = Header(subject, 'utf-8')

                    smtpObj = smtplib.SMTP()
                    smtpObj.connect(host, SMTP_Port)  # 25 为 SMTP 端口号
                    smtpObj.login(user, password)
                    smtpObj.sendmail(sender, receiver, message.as_string())

                    # 更新ProgressBar

                    self.progressBar.setValue(i/len(names)*100)

                QMessageBox.warning(self,
                                    "发送成功",
                                    "邮件群发成功！",
                                    QMessageBox.Yes)
                self.progressBar.setValue(0)
                print("Done!")
            elif (len(SMTP_Addr) == 0 or len(SMTP_Port) == 0 or len(SMTP_User) == 0 or len(SMTP_Pass) == 0):
                QMessageBox.warning(self,
                                    "SMTP配置错误",
                                    "SMTP配置错误！/n请先配置SMTP服务！",
                                    QMessageBox.Yes)
            elif len(path_openfile_name) == 0:
                QMessageBox.warning(self,
                                    "收件人错误",
                                    "请先导入正确的收件人数据！",
                                    QMessageBox.Yes)
            elif len(Subject) ==0:
                QMessageBox.warning(self,
                                    "主题错误",
                                    "邮件主题不能为空！",
                                    QMessageBox.Yes)
            elif len(MailContent) ==0:
                QMessageBox.warning(self,
                                    "内容错误",
                                    "邮件内容不能为空！",
                                    QMessageBox.Yes)
            else:
                QMessageBox.warning(self,
                                    "发送失败",
                                    "邮件群发失败！",
                                    QMessageBox.Yes)
        except Exception as e:
            print('err ', e)
            QMessageBox.warning(self,
                                    "发送失败",
                                    "邮件群发失败！",
                                    QMessageBox.Yes)

class ProgressBar_Worker(QThread):

    progressBarValue = pyqtSignal(int)  # 更新进度条

    def __init__(self):
        super(ProgressBar_Worker, self).__init__()


    def run(self):
        for i in range(101):
            time.sleep(0.1)
            self.progressBarValue.emit(i)  # 发送进度条的值 信号


'''
    def SetSubject(self):
        global Subject
        Subject = self.textEdit_2.toPlainText()

    def SetMailContent(self):
        global MailContent
        MailContent = self.textEdit.toPlainText()
'''

if __name__ == '__main__':
    app = QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    sys.exit(app.exec_())